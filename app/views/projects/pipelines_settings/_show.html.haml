.row.prepend-top-default
  .col-lg-3.profile-settings-sidebar
    %h4.prepend-top-0
      CI/CD 流水线
  .col-lg-9
    = form_for @project, url: namespace_project_pipelines_settings_path(@project.namespace.becomes(Namespace), @project) do |f|
      %fieldset.builds-feature
        - unless @repository.gitlab_ci_yml
          .form-group
            %p 在使用持续集成之前，需要先配置流水线
            = link_to '开始使用 CI/CD 流水线', help_page_path('ci/quick_start/README'), class: 'btn btn-info'
            %hr
        .form-group.append-bottom-default
          = f.label :runners_token, "Runner 令牌", class: 'label-light'
          = f.text_field :runners_token, class: "form-control", placeholder: 'xEeFCaDAB89'
          %p.help-block Runner 用来检出项目的安全令牌。

        %hr
        .form-group
          %h5.prepend-top-0
            流水线的Git策略
          %p
            选择 <code>clone</code> 或者 <code>fetch</code> 方式来获取最新的程序代码
            = link_to icon('question-circle'), help_page_path('user/project/pipelines/settings', anchor: 'git-strategy')
          .radio
            = f.label :build_allow_git_fetch_false do
              = f.radio_button :build_allow_git_fetch, 'false'
              %strong git clone
              %br
              %span.descr
                比较慢，但可以在每次作业前保证你有一个干净的文件目录
          .radio
            = f.label :build_allow_git_fetch_true do
              = f.radio_button :build_allow_git_fetch, 'true'
              %strong git fetch
              %br
              %span.descr
                重用项目的工作空间，速度较快 (如果项目空间不存在，则采用克隆的方式)

        %hr
        .form-group
          = f.label :build_timeout_in_minutes, '超时', class: 'label-light'
          = f.number_field :build_timeout_in_minutes, class: 'form-control', min: '0'
          %p.help-block
            每次作业时间的最大分钟数. 如果超过该时间，则标记为失败。
            = link_to icon('question-circle'), help_page_path('user/project/pipelines/settings', anchor: 'timeout')

        %hr
        .form-group
          .checkbox
            = f.label :public_builds do
              = f.check_box :public_builds
              %strong 公共流水线
            .help-block
              允许所有人访问公共和内部项目的流水线。
              = link_to icon('question-circle'), help_page_path('user/project/pipelines/settings', anchor: 'visibility-of-pipelines')

        %hr
        .form-group
          = f.label :build_coverage_regex, "测试覆盖解析", class: 'label-light'
          .input-group
            %span.input-group-addon /
            = f.text_field :build_coverage_regex, class: 'form-control', placeholder: '\(\d+.\d+\%\) covered'
            %span.input-group-addon /
          %p.help-block
            我们将使用此正则表达式在作业信息中查找测试覆盖输出。如果不想使用此功能，请留空
            = link_to icon('question-circle'), help_page_path('user/project/pipelines/settings', anchor: 'test-coverage-parsing')
          .bs-callout.bs-callout-info
            %p 下面是现有工具的正则表达式例子：
            %ul
              %li
                Simplecov (Ruby) -
                %code \(\d+.\d+\%\) covered
              %li
                pytest-cov (Python) -
                %code \d+\%\s*$
              %li
                phpunit --coverage-text --colors=never (PHP) -
                %code ^\s*Lines:\s*\d+.\d+\%
              %li
                gcovr (C/C++) -
                %code ^TOTAL.*\s+(\d+\%)$
              %li
                tap --coverage-report=text-summary (NodeJS) -
                %code ^Statements\s*:\s*([^%]+)
              %li
                excoveralls (Elixir) -
                %code \[TOTAL\]\s+(\d+\.\d+)%

        = f.submit '保存修改', class: "btn btn-save"

%hr

.row.prepend-top-default
  = render partial: 'projects/pipelines_settings/badge', collection: @badges
